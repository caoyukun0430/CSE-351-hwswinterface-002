1
00:00:00,137 --> 00:00:04,183
[MUSIC] 

2
00:00:04,183 --> 00:00:07,390
. 
Welcome back, it's time for the fifth 

3
00:00:07,390 --> 00:00:11,075
section of the course Procedures and 
Stacks. 

4
00:00:11,075 --> 00:00:15,965
What we're going to talk about here is 
another aspect of Assembly Language. 

5
00:00:15,965 --> 00:00:20,292
Namely how we define procedures or 
methods in Assembly Language. 

6
00:00:20,292 --> 00:00:24,009
And how do we keep track of where we are 
in the execution of a set of nested 

7
00:00:24,009 --> 00:00:29,824
procedure calls. 
So, this this section will cover quite a 

8
00:00:29,824 --> 00:00:33,190
few topics. 
We're going to start with talking about 

9
00:00:33,190 --> 00:00:36,863
the concept of a stack. 
A special memory construct that we're 

10
00:00:36,863 --> 00:00:42,360
going to use to keep track of this 
calling history through our programs. 

11
00:00:42,360 --> 00:00:46,380
then we're going to talk about return 
addresses and return values, namely when 

12
00:00:46,380 --> 00:00:51,920
we return from a method or procedure. 
where do we return to and how do we 

13
00:00:51,920 --> 00:00:56,240
remember that and what value do we 
return? 

14
00:00:56,240 --> 00:01:00,502
how is that stored? 
we'll then talk briefly about stack based 

15
00:01:00,502 --> 00:01:06,340
languages and the Linux stack frame. 
A particular type of stack that we'll be 

16
00:01:06,340 --> 00:01:12,595
using throughout the rest of the course. 
Then we'll get into some other aspects of 

17
00:01:12,595 --> 00:01:15,727
stacks. 
Namely how we pass arguments to 

18
00:01:15,727 --> 00:01:21,190
procedures on the stack and allocate 
local variables for a procedure. 

19
00:01:21,190 --> 00:01:24,930
and some of the conventions we have to 
follow to make sure we keep all of this 

20
00:01:24,930 --> 00:01:29,360
stuff straight. 
we'll also talk about the differences 

21
00:01:29,360 --> 00:01:32,340
between the 32 bit and 64 bit 
architectures. 

22
00:01:32,340 --> 00:01:36,820
So, let's start, this video with, the 
first topic which is basically what is a 

23
00:01:36,820 --> 00:01:42,500
stack in memory and what are some basic 
stack operations. 

24
00:01:42,500 --> 00:01:49,230
Okay, so, if we look at memory, the way 
we ordganise it for, our programs. 

25
00:01:49,230 --> 00:01:52,647
Is that we'll have an area where we will 
keep all of our instructions all these 

26
00:01:52,647 --> 00:01:56,565
assembly language instructions you've 
been learning about. 

27
00:01:56,565 --> 00:02:01,529
they will be usually stored in the area 
starting at the low end of the memory 

28
00:02:01,529 --> 00:02:07,442
here shown at the bottom. 
Then aboce that we'll, store some 

29
00:02:07,442 --> 00:02:11,286
literals in the program, by literals we 
mean data that doesn't really ever 

30
00:02:11,286 --> 00:02:15,190
change. 
Things like a string that I might want to 

31
00:02:15,190 --> 00:02:20,116
print, as an example. 
we'll also do the same thing with static 

32
00:02:20,116 --> 00:02:23,837
data, variables that we know we're 
going to need, maybe big arrays of 

33
00:02:23,837 --> 00:02:28,490
values. 
that will know that we always will have 

34
00:02:28,490 --> 00:02:33,038
that storage available to them. 
And allocate those in memory in a static 

35
00:02:33,038 --> 00:02:37,730
location meaning there'll always be in 
the same place. 

36
00:02:37,730 --> 00:02:40,670
This is the case, for example, with 
global variables in C. 

37
00:02:40,670 --> 00:02:44,750
that's where they're placed, then, we 
have some more interesting areas of 

38
00:02:44,750 --> 00:02:48,190
memory. 
We have a dynamic data area, also 

39
00:02:48,190 --> 00:02:53,136
referred to as the heap. 
Often and the heap holds data that we 

40
00:02:53,136 --> 00:02:58,335
create just for a place to store some 
values temporarily. 

41
00:02:58,335 --> 00:03:04,210
While we might be in the middle of a 
procedure or in a phase of our program. 

42
00:03:04,210 --> 00:03:07,936
but we'll probably reclaim this memory 
later, because we won't need it for very 

43
00:03:07,936 --> 00:03:15,390
long during the execution of our program. 
these variables, this space is allocated 

44
00:03:15,390 --> 00:03:22,420
using things like New and Java or Mallock 
in C basic memory allocation procedures 

45
00:03:22,420 --> 00:03:29,847
that we can call. 
To get us a new space for the particular 

46
00:03:29,847 --> 00:03:34,340
data type we need. 
And this region grows as we ask for more 

47
00:03:34,340 --> 00:03:39,610
and more dynamic data space and it grows 
up in the memory to higher addresses. 

48
00:03:40,650 --> 00:03:44,335
The stack is yet another area of memory 
where we're going to store this procedure 

49
00:03:44,335 --> 00:03:49,674
context as we do these procedure calls. 
And it's going to start at the high end 

50
00:03:49,674 --> 00:03:53,370
of memory and grow down in the other 
direction. 

51
00:03:53,370 --> 00:03:58,062
and we'll see in a second what's what's 
going to be in that stack to you know, 

52
00:03:58,062 --> 00:04:02,645
what is, what do we mean by procedure 
context. 

53
00:04:02,645 --> 00:04:07,439
For now the important thing to see, is 
that in fact the stack grows down. 

54
00:04:07,439 --> 00:04:11,924
The dynamic data grows up, in addresses, 
and the, these two could meet, and that 

55
00:04:11,924 --> 00:04:17,837
would be a really bad thing. 
either that we're putting to much 

56
00:04:17,837 --> 00:04:24,275
requirements on our call stack, we're 
going to deeply nested into procedures. 

57
00:04:24,275 --> 00:04:27,879
Or we're just asking for too much data at 
one time. 

58
00:04:27,879 --> 00:04:32,289
And this is the kind of error we'll see 
in our program sometimes when we, when 

59
00:04:32,289 --> 00:04:36,605
the operating system says its out of 
memory. 

60
00:04:36,605 --> 00:04:41,155
Meaning that its overfilled this area and 
those two regions, the stack and the 

61
00:04:41,155 --> 00:04:48,070
dynamic data are running into each other. 
and potentially override it. 

62
00:04:48,070 --> 00:04:53,374
Okay, another thing to keep in mind about 
these memory areas is that the 

63
00:04:53,374 --> 00:04:59,509
instructions, the literals. 
And the static data are initialized when 

64
00:04:59,509 --> 00:05:03,780
the process starts up. 
When the program starts up. 

65
00:05:03,780 --> 00:05:07,380
The dynamic data is managed by the 
program, meaning we're writing in the 

66
00:05:07,380 --> 00:05:12,190
program when to allocate more memory, 
when to create a new object. 

67
00:05:12,190 --> 00:05:16,480
while the stack is managed automatically 
by the compiler. 

68
00:05:16,480 --> 00:05:21,380
It's there's instructions inserted by the 
compiler to add things to the stack or 

69
00:05:21,380 --> 00:05:27,197
remove things from the stack, okay. 
Another aspect of these areas is that 

70
00:05:27,197 --> 00:05:31,355
you'll notice that the instructions are 
read-only and executable. 

71
00:05:31,355 --> 00:05:35,329
Meaning, we interpret the bits there as 
the instructions for the CPU. 

72
00:05:35,329 --> 00:05:39,550
The literals are also read only because 
they're fixed, we're not changing those 

73
00:05:39,550 --> 00:05:43,465
strings ever. 
But they are not executable. 

74
00:05:43,465 --> 00:05:46,994
Okay? 
We're not going to try to execute our our 

75
00:05:46,994 --> 00:05:51,285
data strings. 
So, that's really important because that 

76
00:05:51,285 --> 00:05:56,421
keeps things from getting confused. 
should we accidentally jump to this area 

77
00:05:56,421 --> 00:06:00,970
to try to execute instructions. 
The static data is, of course, writable. 

78
00:06:00,970 --> 00:06:05,310
We have to be able to change it but it is 
also not executable. 

79
00:06:05,310 --> 00:06:09,718
The dynamic data, the same way and the 
stack the same way. 

80
00:06:09,718 --> 00:06:16,406
this, this are important limitations that 
the stack is actually just data values. 

81
00:06:16,406 --> 00:06:20,870
And addresses that were used but that are 
not instructions. 

82
00:06:20,870 --> 00:06:24,518
So, its not executable and we will see 
this is an important aspect of security 

83
00:06:24,518 --> 00:06:29,791
in modern computer systems. 
Okay, we'll see that in one of our 

84
00:06:29,791 --> 00:06:33,450
assignments. 
Okay, so let's take a look at the call 

85
00:06:33,450 --> 00:06:39,412
stack for the IA32 architecture. 
as I mentioned we'll put the bottom of 

86
00:06:39,412 --> 00:06:45,374
the stack at the top of the memory 
And the bottom[LAUGH], of the stack or 

87
00:06:45,374 --> 00:06:50,503
the top of the stack at the bottom so the 
stack rose in a downward direction. 

88
00:06:50,503 --> 00:06:54,094
And this is just a convention that we use 
it of course is kind of counter 

89
00:06:54,094 --> 00:06:57,592
intuitive. 
given that we're going to talk about the 

90
00:06:57,592 --> 00:07:00,690
top of the stack[LAUGH], being at the 
bottom. 

91
00:07:00,690 --> 00:07:05,425
But bear with us for that, this is 
typically how it's drawn upside down. 

92
00:07:05,425 --> 00:07:08,905
The important thing to remember is that 
as we add things to the stack, the 

93
00:07:08,905 --> 00:07:12,985
addresses get lower. 
And as we take things off the stack, the 

94
00:07:12,985 --> 00:07:15,780
addresses get higher, as we move up. 
Okay. 

95
00:07:18,370 --> 00:07:23,122
There's a special register in the I30, 
IA32 architecture called ESP for the 

96
00:07:23,122 --> 00:07:28,475
Extended Stack Pointer. 
That always points to the top element of 

97
00:07:28,475 --> 00:07:32,544
the stack. 
the last thing that was placed on the 

98
00:07:32,544 --> 00:07:36,390
stack. 
Okay. 

99
00:07:36,390 --> 00:07:40,614
So, the first stack operation we're 
going to look at is the push instruction 

100
00:07:40,614 --> 00:07:45,820
and here I'm showing a push long meaning 
a 32-bit value. 

101
00:07:45,820 --> 00:07:52,010
And it's given a source register to or 
memory location to push from. 

102
00:07:52,010 --> 00:07:57,122
And what basically that does is it takes 
the value at that source, whether it's a 

103
00:07:57,122 --> 00:08:03,208
register or a memory location and adds it 
to the top of the stack. 

104
00:08:03,208 --> 00:08:07,460
It also decrements the stack pointer by 
four. 

105
00:08:07,460 --> 00:08:10,850
And why four? 
Because it's a push long, remember? 

106
00:08:10,850 --> 00:08:14,030
Right? 
Four byte's a 32-bit word. 

107
00:08:14,030 --> 00:08:18,653
So, the stack pointer is decremented, and 
now points to the new location in memory, 

108
00:08:18,653 --> 00:08:24,950
where we've added a or copied that value. 
into the memory, okay. 

109
00:08:24,950 --> 00:08:28,730
So, that's pushing something onto the 
stack, placing it on the top of course 

110
00:08:28,730 --> 00:08:32,655
here at the bottom, as we've drawn it 
upside down. 

111
00:08:32,655 --> 00:08:37,881
All right as you'd expect, there's a 
corresponding pop instruction, taking 

112
00:08:37,881 --> 00:08:42,440
things off of the stack. 
And in this case we also give it a 

113
00:08:42,440 --> 00:08:47,000
destination to go take that value we pop 
from the stack. 

114
00:08:47,000 --> 00:08:50,070
and where to go put it? 
We need the address of that. 

115
00:08:50,070 --> 00:08:55,930
And that again can be a memory location 
or a register in the, in the CPU. 

116
00:08:55,930 --> 00:09:00,843
So, the way that works is we remove that 
remove in quotes for now. 

117
00:09:00,843 --> 00:09:05,533
we remove that value from the top of the 
stack and adjust the stack pointer for 

118
00:09:05,533 --> 00:09:10,480
up. 
Again for four bytes of that 32-bit word. 

119
00:09:10,480 --> 00:09:15,760
Now, when we say remove this word, we're 
not really removing it. 

120
00:09:15,760 --> 00:09:20,180
it's still there in the memory we're just 
not referencing it anymore. 

121
00:09:20,180 --> 00:09:25,330
We've adjusted our stack pointer to point 
to the next value down the stack. 

122
00:09:25,330 --> 00:09:31,345
but that, those bits if you will, are 
still in the memory at that location. 

123
00:09:31,345 --> 00:09:35,652
It's just that we don't we, we 
acknowledge that they're not to be 

124
00:09:35,652 --> 00:09:40,328
interpreted anymore. 
We've effectively removed them in that 

125
00:09:40,328 --> 00:09:45,404
sense and that we can reclaim this space 
and push something new onto the stack. 

126
00:09:45,404 --> 00:09:49,365
And overwrite those bits, because we 
don't care about them anymore. 

127
00:09:49,365 --> 00:09:55,800
We've popped them off, and gone and saved 
them away in our destination, okay? 

128
00:09:55,800 --> 00:10:00,440
So, they are now safely stored there and 
we can use the stack for other things. 

