1
00:00:00,106 --> 00:00:05,833
[MUSIC]. 

2
00:00:05,833 --> 00:00:09,265
Hello. 
Let's see now why caches work, which the 

3
00:00:09,265 --> 00:00:13,364
principle of locality. 
So why do caches work? 

4
00:00:13,364 --> 00:00:16,955
There's something programs called 
locality, which says that they tends to 

5
00:00:16,955 --> 00:00:21,661
use data and instructions set at either. 
Nearby in space, they're close by, 

6
00:00:21,661 --> 00:00:25,848
addresses are close by. 
Or, they tend to be written to reuse 

7
00:00:25,848 --> 00:00:31,326
data, the same data over and over again. 
So this is called locality because it 

8
00:00:31,326 --> 00:00:34,968
tends to stay close by, either in space, 
or in time, okay? 

9
00:00:34,968 --> 00:00:38,937
So we have two types of locality. 
One is called temporal locality. 

10
00:00:38,937 --> 00:00:43,370
That says that data items that were 
referenced recently. 

11
00:00:43,370 --> 00:00:45,880
Are likely to be referenced again, in the 
near future. 

12
00:00:45,880 --> 00:00:49,620
So if you gotta a given data in a, in a 
block here, I give you piece of data that 

13
00:00:49,620 --> 00:00:53,880
start a new that, that is accessed by 
your program. 

14
00:00:53,880 --> 00:00:58,645
You tend to access it over and over again 
in time, 'kay. 

15
00:00:58,645 --> 00:01:01,898
Then there's another thing called spacial 
locality. 

16
00:01:01,898 --> 00:01:06,318
That says that if you have a piece of 
data that you're interested in. 

17
00:01:06,318 --> 00:01:10,606
It's likely that you're also going to 
you're also going to need a piece of data 

18
00:01:10,606 --> 00:01:16,128
that that happens to be located very 
nearby in the address space. 

19
00:01:16,128 --> 00:01:18,291
'Kay. 
So how do caches take advantage of 

20
00:01:18,291 --> 00:01:22,335
temporal locality? 
Well, just by storing recently accessed 

21
00:01:22,335 --> 00:01:25,702
data we take advantage of temporal 
locality. 

22
00:01:25,702 --> 00:01:27,780
'Kay. 
But now. 

23
00:01:27,780 --> 00:01:31,666
How, how do caches take as either spatial 
locality, take space, or do the spatial 

24
00:01:31,666 --> 00:01:35,436
locality by bringing entire blocks of 
data from memory, as opposed to a single 

25
00:01:35,436 --> 00:01:40,336
byte at a time. 
So, essentially, if you need say, address 

26
00:01:40,336 --> 00:01:43,932
A, when you go to the cache, you're not 
only going to get A, but you're also 

27
00:01:43,932 --> 00:01:47,980
going to get A plus 1, A plus 2, and so 
on. 

28
00:01:47,980 --> 00:01:52,491
Up up to a certain limit. 
So let's see an example of a program that 

29
00:01:52,491 --> 00:01:55,928
has locality. 
Suppose you have this loop here, and this 

30
00:01:55,928 --> 00:02:01,980
loop is iterating over a rate a and 
adding it to the sum variable. 

31
00:02:01,980 --> 00:02:06,440
Where is locality here? 
Where's locality, locality here? 

32
00:02:06,440 --> 00:02:10,862
Let's start with data. 
Well, so with data the variable sum, is 

33
00:02:10,862 --> 00:02:13,310
referenced multiple times. 
Okay? 

34
00:02:13,310 --> 00:02:16,230
We act so, we act over and over again 
here inside our loop. 

35
00:02:16,230 --> 00:02:19,660
At each iteration of the loop read it, 
and write it. 

36
00:02:19,660 --> 00:02:24,613
It reads it because you're doing sum, 
equals sum, plus a of i. 

37
00:02:26,060 --> 00:02:29,840
Now, we also have spatial locality 
because we're accessing array a in all of 

38
00:02:29,840 --> 00:02:33,618
it's elements. 
So if you have memory here, so we're 

39
00:02:33,618 --> 00:02:37,650
going to have your a of a and then right 
next to it, you're going to have a of 

40
00:02:37,650 --> 00:02:41,275
one. 
And then we're going to have a. 

41
00:02:41,275 --> 00:02:44,880
Of two and so on. 
They're all near by in memory. 

42
00:02:44,880 --> 00:02:50,256
So since they're close by, we can, we can 
take advantage of spacial locality. 

43
00:02:50,256 --> 00:02:55,866
So the other, type of locality that we 
have here is instructional locality, 

44
00:02:55,866 --> 00:02:59,025
okay? 
So we have instructions, well remember 

45
00:02:59,025 --> 00:03:01,305
that instructions are just stored in 
memory. 

46
00:03:01,305 --> 00:03:05,900
It means the processors have to read 
them, right? 

47
00:03:05,900 --> 00:03:08,910
And system tend to read one instruction 
after the other, right? 

48
00:03:08,910 --> 00:03:12,729
So in, I mean, so we already have special 
locality right off the bat, because, you 

49
00:03:12,729 --> 00:03:17,230
know, we read, we read references. 
We, we read instructions in the sequence 

50
00:03:17,230 --> 00:03:21,297
that they appear in the program, okay? 
So when you have a series of instructions 

51
00:03:21,297 --> 00:03:24,459
one after the other in your program, 
they're going to reside close by memory, 

52
00:03:24,459 --> 00:03:28,506
right next to each other. 
So when you bring one, you might as well 

53
00:03:28,506 --> 00:03:31,350
just bring a few instructions ahead as 
well, okay. 

54
00:03:31,350 --> 00:03:34,694
And we also have temporal locality 
because we have things like, loops. 

55
00:03:34,694 --> 00:03:38,685
See this loop here is just executing it's 
body over and over and over again. 

56
00:03:38,685 --> 00:03:41,909
If we have a cache that stores the code 
for the body of the loop, it's going to 

57
00:03:41,909 --> 00:03:46,182
be very effective, right? 
Because instead of going to memory every 

58
00:03:46,182 --> 00:03:49,952
time you execute a body of the loop, you 
can just go, to the cache, and and get 

59
00:03:49,952 --> 00:03:53,320
the data. 
Okay? 

60
00:03:53,320 --> 00:03:56,978
So it's very important to be able to 
assess locality of your program 

61
00:03:56,978 --> 00:04:00,525
effectively. 
Because it will help you lay out data and 

62
00:04:00,525 --> 00:04:04,773
memory in a way that's more effective for 
cad, that makes caches more effective for 

63
00:04:04,773 --> 00:04:07,320
your program. 
Okay? 

64
00:04:07,320 --> 00:04:10,067
So if you know that there's a certain way 
of accessing your data structures, such 

65
00:04:10,067 --> 00:04:12,691
that it can take advantage of spatial 
locality, you should definitely do it, 

66
00:04:12,691 --> 00:04:15,992
because it is going to make your program 
faster. 

67
00:04:15,992 --> 00:04:20,213
And, same way, if there was, if there's a 
way of writing your program that 

68
00:04:20,213 --> 00:04:26,190
increases the possibility of taking 
advantage of temporal locality. 

69
00:04:26,190 --> 00:04:29,670
It's also very important. 
So let me give you an example here. 

70
00:04:29,670 --> 00:04:34,142
Suppose I have this piece of code here. 
It's a, it, it, it recieves. 

71
00:04:34,142 --> 00:04:36,810
an array. 
A three-dimensional array, okay? 

72
00:04:36,810 --> 00:04:41,450
A three-dimensional matrix as as a 
parameter. 

73
00:04:41,450 --> 00:04:44,890
And then we trade over the entire array. 
That's why we have three loops, okay? 

74
00:04:44,890 --> 00:04:48,440
One loop that varies i, which is one of 
the index here. 

75
00:04:48,440 --> 00:04:51,070
The other one varies j, which is this 
index here. 

76
00:04:51,070 --> 00:04:55,817
And then another that varies k, which is 
this index here. 

77
00:04:55,817 --> 00:05:00,839
And the way C lays out matrices in memory 
is just by putting an entire row at a 

78
00:05:00,839 --> 00:05:05,296
time. 
'Kay, but since this program here is not 

79
00:05:05,296 --> 00:05:11,878
accessing all of the elements of a row 
before moving to the next one, right? 

80
00:05:11,878 --> 00:05:16,885
So then we see the inner loop here is 
varying the outer most dimension. 

81
00:05:16,885 --> 00:05:20,845
Now we're just, going all over memory, 
instead of, reading memory one after the 

82
00:05:20,845 --> 00:05:24,505
other here, we're going to read one 
place, another place, another place, 

83
00:05:24,505 --> 00:05:28,705
another place, and it's just not going to 
take advantage of locality, especially if 

84
00:05:28,705 --> 00:05:34,248
the, matrix does not fit in cache. 
'Kay. 

85
00:05:34,248 --> 00:05:36,653
I know this was quick, but we're going to 
show you another example later on as we 

86
00:05:36,653 --> 00:05:39,662
teach you more about caches, it's 
going to make this make sense. 

87
00:05:39,662 --> 00:05:42,542
This is mainly to show that if you, you 
have to pay attention to your code to 

88
00:05:42,542 --> 00:05:45,467
understand how we can take individual 
locality and whether you might have, be 

89
00:05:45,467 --> 00:05:48,812
having performance issues because of 
that. 

90
00:05:48,812 --> 00:05:51,282
'Kay. 
So what's wrong with this code is that 

91
00:05:51,282 --> 00:05:55,422
we're accessing it out of order. 
So, how can we fix it? 

92
00:05:55,422 --> 00:05:59,298
Well, we should first loop through the 
last dimension, then the middle dimension 

93
00:05:59,298 --> 00:06:04,696
then the first dimension. 
Because we access we access data in a way 

94
00:06:04,696 --> 00:06:10,046
that that follows how it's laid out in 
memory. 

95
00:06:10,046 --> 00:06:15,056
Okay? 
See you soon. 

