1
00:00:00,008 --> 00:00:06,965
[MUSIC]. 

2
00:00:06,965 --> 00:00:10,583
Okay, let's talk a little bit about how 
we'd handle unsigned and signed integers 

3
00:00:10,583 --> 00:00:15,744
in the C language. 
which we'll be using in our first 

4
00:00:15,744 --> 00:00:21,149
homework assignment. 
So as I mentioned in the previous video 

5
00:00:21,149 --> 00:00:25,267
the numbers that we can represent in both 
unsigned and two's complement notation 

6
00:00:25,267 --> 00:00:30,397
have maximum and minimums. 
And what we have here is a table that 

7
00:00:30,397 --> 00:00:34,365
shows what those maximum and minimum 
numbers are for various sizes of the 

8
00:00:34,365 --> 00:00:38,562
word. 
so W of eight, 16. 

9
00:00:38,562 --> 00:00:44,542
32 and 64 and you can see the, the, the 
basic property is that the range of the 

10
00:00:44,542 --> 00:00:53,460
two's compliment numbers is pretty much 
symmetric, it turns out there's. 

11
00:00:53,460 --> 00:00:58,146
one more negative number then positive 
numbers, but thats pretty close, and in 

12
00:00:58,146 --> 00:01:02,832
the case of unsigned numbers the maximum 
number we can represent is about twice 

13
00:01:02,832 --> 00:01:07,589
the size of the maximum twos compliment 
positive, C provides a port for unsigned 

14
00:01:07,589 --> 00:01:14,472
and signed numbers. 
In a file called limits .H, .H files are 

15
00:01:14,472 --> 00:01:18,376
header files and they can be include din 
our own code by statements such as the 

16
00:01:18,376 --> 00:01:22,604
one above. 
You'll see these come up in some of the 

17
00:01:22,604 --> 00:01:26,410
sample code that we'll be doing for the 
homework assignments. 

18
00:01:26,410 --> 00:01:31,806
But in limits .H for example we have some 
constanst that are predeclared for us for 

19
00:01:31,806 --> 00:01:36,822
the various Maximum and minimum values 
for both a, standard word size and the 

20
00:01:36,822 --> 00:01:43,080
long linuxers. 
And these values of platforms specific. 

21
00:01:43,080 --> 00:01:46,840
So we'll be using limits that age that's 
on a linux system. 

22
00:01:46,840 --> 00:01:51,366
Of course, if your on a 64 bit linux 
machine, things will represent, will be 

23
00:01:51,366 --> 00:01:57,785
more in the 64 bit a values. 
If you're on an older machine, you might 

24
00:01:57,785 --> 00:02:03,230
see the 32 bit values. 
Okay, so in c, constants are by default 

25
00:02:03,230 --> 00:02:08,744
considered to be signed integers. 
So a number, if we declare an int, it's a 

26
00:02:08,744 --> 00:02:12,091
signed integer. 
If we want it to be unsigned, we have to 

27
00:02:12,091 --> 00:02:15,995
explicitly say so We can also when we 
just write a number to say that we mean 

28
00:02:15,995 --> 00:02:19,655
it to be represented as an unsigned 
integer, we can just add a capital U to 

29
00:02:19,655 --> 00:02:26,580
the end of it. 
So number such as these are are, 

30
00:02:26,580 --> 00:02:34,520
unsigned. 
Okay so in the C language again into. 

31
00:02:34,520 --> 00:02:37,150
is for integer and that means a signed 
integer. 

32
00:02:37,150 --> 00:02:42,120
If we want unsigned we use just the word 
unsigned. 

33
00:02:42,120 --> 00:02:46,160
and then we can cast back and forth 
between these numbers. 

34
00:02:46,160 --> 00:02:51,272
So we can take an unsigned integer, cast 
it as an integer as a signed integer and 

35
00:02:51,272 --> 00:02:56,955
assign it to a regular integer variable. 
And vice versa. 

36
00:02:56,955 --> 00:03:02,424
Implicit casting also occurs. 
So we don't have to put the, explicit, 

37
00:03:02,424 --> 00:03:07,310
way we want the number interpreted in 
parentheses. 

38
00:03:07,310 --> 00:03:11,288
And this happens both in assignments and 
in function calls when you use these 

39
00:03:11,288 --> 00:03:17,075
variables as, arguments to a function. 
so here we have an unsigned value being 

40
00:03:17,075 --> 00:03:21,170
assigned to a signed value, a signed 
value being assigned to an unsigned 

41
00:03:21,170 --> 00:03:26,100
value. 
Now, what happens in the compiler when 

42
00:03:26,100 --> 00:03:31,284
this goes on is it basically will figure 
out how to move that number not actually 

43
00:03:31,284 --> 00:03:39,278
move it, but reinterpret it. 
As the corresponding unsigned or signed 

44
00:03:39,278 --> 00:03:43,488
integer, Okay? 
But lets take a look in more detail on 

45
00:03:43,488 --> 00:03:48,240
what actually happens here. 
We're going to look at a set of examples. 

46
00:03:48,240 --> 00:03:51,460
the key thing to remember is the bits are 
actually unchanged, we're just going to 

47
00:03:51,460 --> 00:03:55,270
interpret them differently. 
Okay. 

48
00:03:55,270 --> 00:03:59,302
So, if you mix unsigned and signed values 
in a single expression, then signed 

49
00:03:59,302 --> 00:04:06,020
values get implicitly cast to unsigned. 
So unsigned dominates, if you will. 

50
00:04:06,020 --> 00:04:09,880
So let's take a look at what happens here 
in some examples. 

51
00:04:09,880 --> 00:04:15,330
Suppose I have the constant zero, which 
is a signed value. 

52
00:04:15,330 --> 00:04:21,946
And the constant 0U, an unsigned value. 
Well, these these values are exactly the 

53
00:04:21,946 --> 00:04:27,170
same, but they're both evaluated as if 
they were unsigned. 

54
00:04:27,170 --> 00:04:31,970
In other words, this signed 0 is being 
reinterpreted as an unsigned number. 

55
00:04:31,970 --> 00:04:36,770
Fortunately, zero is all, is all the bits 
are zero in either case. 

56
00:04:36,770 --> 00:04:41,280
So that's pretty straight forward to do. 
Let's take a look at the next one. 

57
00:04:41,280 --> 00:04:47,220
minus one unsigned. 
I'm sorry, minus one signed and zero 

58
00:04:47,220 --> 00:04:49,664
signed. 
Well in this case both numbers are 

59
00:04:49,664 --> 00:04:53,270
signed, so we will do the evaluation of 
signed numbers. 

60
00:04:53,270 --> 00:04:56,804
And we would expect in fact the minus 1 
to be less than, interpreted as being 

61
00:04:56,804 --> 00:05:00,482
less than 0. 
In terms of the bit patterns here, 

62
00:05:00,482 --> 00:05:07,210
though, remember the minus 1 is all ones. 
The zero is all zero. 

63
00:05:07,210 --> 00:05:11,163
But it's going to be interpreted as a 
signed value, so that first bit of the 

64
00:05:11,163 --> 00:05:16,370
representation of minus 1 has that high 
negative weight. 

65
00:05:16,370 --> 00:05:19,980
Which will make it less than 0. 
Okay. 

66
00:05:19,980 --> 00:05:22,359
Now, if instead we compare the -1 to an 
unsigned 0 in the next line, that's a 

67
00:05:22,359 --> 00:05:24,894
little different because now we're going 
to reinterpret the -1 as an unsigned 

68
00:05:24,894 --> 00:05:29,375
value. 
Well, all 1s reinterpreted as an unsigned 

69
00:05:29,375 --> 00:05:37,603
value is a huge number. 
Because we lost that negative weight of 

70
00:05:37,603 --> 00:05:47,086
that first The most significant bit. 
So, now we have a large number and it's 

71
00:05:47,086 --> 00:05:51,140
going to come out as being greater than. 
So, look at that. 

72
00:05:51,140 --> 00:05:55,696
Just because one of the constants is 
interpreted as an unsigned number, we get 

73
00:05:55,696 --> 00:05:59,860
a totally different result. 
even though we might think we're 

74
00:05:59,860 --> 00:06:02,960
comparing the same values. 
But that's just because of how the 

75
00:06:02,960 --> 00:06:08,072
numbers are being interpreted. 
And C has this convention of converting 

76
00:06:08,072 --> 00:06:13,795
everything to unsigned interpretation if 
the, if we mix the two types. 

77
00:06:13,795 --> 00:06:18,530
OK, let's take a look at a different 
example in the next line. 

78
00:06:18,530 --> 00:06:23,890
We're using here a large positive number 
as a signed integer. 

79
00:06:23,890 --> 00:06:27,380
And comparing it against a very small 
negative number. 

80
00:06:27,380 --> 00:06:32,072
And, here again, both are signed values. 
We'll interpret them as signed. 

81
00:06:32,072 --> 00:06:34,425
And of course that large positive is 
greater. 

82
00:06:34,425 --> 00:06:39,990
Now, again, if one of them is interpreted 
in fact as unsigned, what happens? 

83
00:06:39,990 --> 00:06:44,463
Well, the big negative number is also 
going to be converted to unsigned, and 

84
00:06:44,463 --> 00:06:49,295
what does it become? 
it becomes an even bigger positive 

85
00:06:49,295 --> 00:06:54,575
number, so now it the comparison will say 
that the number on teh left which looks 

86
00:06:54,575 --> 00:06:59,695
like a positive number is less than this 
supposedly negatvie number but this 

87
00:06:59,695 --> 00:07:07,694
negative number was reinterpreted. 
As an unsigned value and turned into a 

88
00:07:07,694 --> 00:07:10,040
big positive number. 
Okay. 

89
00:07:10,040 --> 00:07:13,631
Next example, minus one against minus 
two, both signed, we would expect the 

90
00:07:13,631 --> 00:07:17,170
minus one to be greater than the minus 
two. 

91
00:07:17,170 --> 00:07:22,966
in the next example a minus one cast as 
unsigned again yields a huge positive 

92
00:07:22,966 --> 00:07:27,556
number. 
It is going to be greater than the minus 

93
00:07:27,556 --> 00:07:30,198
two. 
So in this case it happens to work out, 

94
00:07:30,198 --> 00:07:34,280
that we get the same result. 
But again that's only because of the 

95
00:07:34,280 --> 00:07:37,753
interpretation, kay. 
Lets take a look at the last two lines. 

96
00:07:37,753 --> 00:07:41,680
Here we have a large positive sign 
number. 

97
00:07:41,680 --> 00:07:45,660
Compared against a large positive 
unsigned number. 

98
00:07:45,660 --> 00:07:49,060
What will happen here is that that number 
on the left will be converted to unsigned 

99
00:07:49,060 --> 00:07:53,325
as well. 
Will still be a relatively large positive 

100
00:07:53,325 --> 00:07:58,760
number and still smaller than the one on 
the right. 

101
00:07:58,760 --> 00:08:01,075
So here we would expect less than 
unsigned. 

102
00:08:01,075 --> 00:08:07,138
Now, if instead we cast that. 
Unsigned number as an integer first, 

103
00:08:07,138 --> 00:08:10,980
reinterpret the bits. 
Well, that number turns out is just large 

104
00:08:10,980 --> 00:08:14,540
enough to have that most significant bit 
set to one. 

105
00:08:14,540 --> 00:08:17,077
So when we interpret it as an integer, 
it's going to look like a negative 

106
00:08:17,077 --> 00:08:20,230
number. 
And in this casek we would expect the 

107
00:08:20,230 --> 00:08:25,143
opposite result when we compare them as 
signed values. 

